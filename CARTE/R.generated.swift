//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `button_primary`.
    static let button_primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "button_primary")
    /// Color `button_secondary`.
    static let button_secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "button_secondary")
    /// Color `link`.
    static let link = Rswift.ColorResource(bundle: R.hostingBundle, name: "link")
    /// Color `rank_1`.
    static let rank_1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "rank_1")
    /// Color `rank_2`.
    static let rank_2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "rank_2")
    /// Color `rank_3`.
    static let rank_3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "rank_3")
    /// Color `rank_other`.
    static let rank_other = Rswift.ColorResource(bundle: R.hostingBundle, name: "rank_other")
    /// Color `tabbar_title_highlight`.
    static let tabbar_title_highlight = Rswift.ColorResource(bundle: R.hostingBundle, name: "tabbar_title_highlight")
    /// Color `tabbar_title_normal`.
    static let tabbar_title_normal = Rswift.ColorResource(bundle: R.hostingBundle, name: "tabbar_title_normal")
    
    /// `UIColor(named: "button_primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func button_primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.button_primary, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "button_secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func button_secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.button_secondary, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "link", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.link, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "rank_1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rank_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rank_1, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "rank_2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rank_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rank_2, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "rank_3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rank_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rank_3, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "rank_other", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rank_other(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rank_other, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "tabbar_title_highlight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabbar_title_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabbar_title_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "tabbar_title_normal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabbar_title_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabbar_title_normal, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 45 images.
  struct image {
    /// Image `ic_cart`.
    static let ic_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart")
    /// Image `ic_favorite_highlight`.
    static let ic_favorite_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_highlight")
    /// Image `ic_favorite_normal`.
    static let ic_favorite_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_normal")
    /// Image `ic_tab_favorite_highlight`.
    static let ic_tab_favorite_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_favorite_highlight")
    /// Image `ic_tab_favorite_normal`.
    static let ic_tab_favorite_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_favorite_normal")
    /// Image `ic_tab_home_highlight`.
    static let ic_tab_home_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_home_highlight")
    /// Image `ic_tab_home_normal`.
    static let ic_tab_home_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_home_normal")
    /// Image `ic_tab_information_highlight`.
    static let ic_tab_information_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_information_highlight")
    /// Image `ic_tab_information_normal`.
    static let ic_tab_information_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_information_normal")
    /// Image `ic_tab_mypage_highlight`.
    static let ic_tab_mypage_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_mypage_highlight")
    /// Image `ic_tab_mypage_normal`.
    static let ic_tab_mypage_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_mypage_normal")
    /// Image `ic_tab_search_highlight`.
    static let ic_tab_search_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_search_highlight")
    /// Image `ic_tab_search_normal`.
    static let ic_tab_search_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_search_normal")
    /// Image `img_banner`.
    static let img_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_banner")
    /// Image `img_cart_none`.
    static let img_cart_none = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_cart_none")
    /// Image `img_favorite_none`.
    static let img_favorite_none = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_favorite_none")
    /// Image `img_feature_1`.
    static let img_feature_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feature_1")
    /// Image `img_feature_2`.
    static let img_feature_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_feature_2")
    /// Image `img_item_10_l`.
    static let img_item_10_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_10_l")
    /// Image `img_item_10`.
    static let img_item_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_10")
    /// Image `img_item_11_l`.
    static let img_item_11_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_11_l")
    /// Image `img_item_11`.
    static let img_item_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_11")
    /// Image `img_item_12_l`.
    static let img_item_12_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_12_l")
    /// Image `img_item_12`.
    static let img_item_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_12")
    /// Image `img_item_1_l`.
    static let img_item_1_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_1_l")
    /// Image `img_item_1`.
    static let img_item_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_1")
    /// Image `img_item_2_l`.
    static let img_item_2_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_2_l")
    /// Image `img_item_2`.
    static let img_item_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_2")
    /// Image `img_item_3_l`.
    static let img_item_3_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_3_l")
    /// Image `img_item_3`.
    static let img_item_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_3")
    /// Image `img_item_4_l`.
    static let img_item_4_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_4_l")
    /// Image `img_item_4`.
    static let img_item_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_4")
    /// Image `img_item_5_l`.
    static let img_item_5_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_5_l")
    /// Image `img_item_5`.
    static let img_item_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_5")
    /// Image `img_item_6_l`.
    static let img_item_6_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_6_l")
    /// Image `img_item_6`.
    static let img_item_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_6")
    /// Image `img_item_7_l`.
    static let img_item_7_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_7_l")
    /// Image `img_item_7`.
    static let img_item_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_7")
    /// Image `img_item_8_l`.
    static let img_item_8_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_8_l")
    /// Image `img_item_8`.
    static let img_item_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_8")
    /// Image `img_item_9_l`.
    static let img_item_9_l = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_9_l")
    /// Image `img_item_9`.
    static let img_item_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_9")
    /// Image `img_size`.
    static let img_size = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_size")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `round_close_black_18pt`.
    static let round_close_black_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "round_close_black_18pt")
    
    /// `UIImage(named: "ic_cart", bundle: ..., traitCollection: ...)`
    static func ic_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorite_highlight", bundle: ..., traitCollection: ...)`
    static func ic_favorite_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorite_normal", bundle: ..., traitCollection: ...)`
    static func ic_favorite_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_favorite_highlight", bundle: ..., traitCollection: ...)`
    static func ic_tab_favorite_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_favorite_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_favorite_normal", bundle: ..., traitCollection: ...)`
    static func ic_tab_favorite_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_favorite_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_home_highlight", bundle: ..., traitCollection: ...)`
    static func ic_tab_home_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_home_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_home_normal", bundle: ..., traitCollection: ...)`
    static func ic_tab_home_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_home_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_information_highlight", bundle: ..., traitCollection: ...)`
    static func ic_tab_information_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_information_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_information_normal", bundle: ..., traitCollection: ...)`
    static func ic_tab_information_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_information_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_mypage_highlight", bundle: ..., traitCollection: ...)`
    static func ic_tab_mypage_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_mypage_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_mypage_normal", bundle: ..., traitCollection: ...)`
    static func ic_tab_mypage_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_mypage_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_search_highlight", bundle: ..., traitCollection: ...)`
    static func ic_tab_search_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_search_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_search_normal", bundle: ..., traitCollection: ...)`
    static func ic_tab_search_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_search_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_banner", bundle: ..., traitCollection: ...)`
    static func img_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_banner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_cart_none", bundle: ..., traitCollection: ...)`
    static func img_cart_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_cart_none, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_favorite_none", bundle: ..., traitCollection: ...)`
    static func img_favorite_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_favorite_none, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_feature_1", bundle: ..., traitCollection: ...)`
    static func img_feature_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feature_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_feature_2", bundle: ..., traitCollection: ...)`
    static func img_feature_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_feature_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_1", bundle: ..., traitCollection: ...)`
    static func img_item_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_10", bundle: ..., traitCollection: ...)`
    static func img_item_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_10_l", bundle: ..., traitCollection: ...)`
    static func img_item_10_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_10_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_11", bundle: ..., traitCollection: ...)`
    static func img_item_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_11_l", bundle: ..., traitCollection: ...)`
    static func img_item_11_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_11_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_12", bundle: ..., traitCollection: ...)`
    static func img_item_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_12_l", bundle: ..., traitCollection: ...)`
    static func img_item_12_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_12_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_1_l", bundle: ..., traitCollection: ...)`
    static func img_item_1_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_1_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_2", bundle: ..., traitCollection: ...)`
    static func img_item_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_2_l", bundle: ..., traitCollection: ...)`
    static func img_item_2_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_2_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_3", bundle: ..., traitCollection: ...)`
    static func img_item_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_3_l", bundle: ..., traitCollection: ...)`
    static func img_item_3_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_3_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_4", bundle: ..., traitCollection: ...)`
    static func img_item_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_4_l", bundle: ..., traitCollection: ...)`
    static func img_item_4_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_4_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_5", bundle: ..., traitCollection: ...)`
    static func img_item_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_5_l", bundle: ..., traitCollection: ...)`
    static func img_item_5_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_5_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_6", bundle: ..., traitCollection: ...)`
    static func img_item_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_6_l", bundle: ..., traitCollection: ...)`
    static func img_item_6_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_6_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_7", bundle: ..., traitCollection: ...)`
    static func img_item_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_7_l", bundle: ..., traitCollection: ...)`
    static func img_item_7_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_7_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_8", bundle: ..., traitCollection: ...)`
    static func img_item_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_8_l", bundle: ..., traitCollection: ...)`
    static func img_item_8_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_8_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_9", bundle: ..., traitCollection: ...)`
    static func img_item_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_item_9_l", bundle: ..., traitCollection: ...)`
    static func img_item_9_l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_9_l, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_size", bundle: ..., traitCollection: ...)`
    static func img_size(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_size, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "round_close_black_18pt", bundle: ..., traitCollection: ...)`
    static func round_close_black_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round_close_black_18pt, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `FeatureCell`.
    static let featureCell = _R.nib._FeatureCell()
    /// Nib `FeatureReusableView`.
    static let featureReusableView = _R.nib._FeatureReusableView()
    /// Nib `ItemCell`.
    static let itemCell = _R.nib._ItemCell()
    /// Nib `SectionButtonReusableView`.
    static let sectionButtonReusableView = _R.nib._SectionButtonReusableView()
    /// Nib `SectionTitleReusableView`.
    static let sectionTitleReusableView = _R.nib._SectionTitleReusableView()
    
    /// `UINib(name: "FeatureCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.featureCell) instead")
    static func featureCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.featureCell)
    }
    
    /// `UINib(name: "FeatureReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.featureReusableView) instead")
    static func featureReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.featureReusableView)
    }
    
    /// `UINib(name: "ItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemCell) instead")
    static func itemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemCell)
    }
    
    /// `UINib(name: "SectionButtonReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sectionButtonReusableView) instead")
    static func sectionButtonReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sectionButtonReusableView)
    }
    
    /// `UINib(name: "SectionTitleReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sectionTitleReusableView) instead")
    static func sectionTitleReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sectionTitleReusableView)
    }
    
    static func featureCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeatureCell? {
      return R.nib.featureCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeatureCell
    }
    
    static func featureReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeatureReusableView? {
      return R.nib.featureReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeatureReusableView
    }
    
    static func itemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemCell? {
      return R.nib.itemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemCell
    }
    
    static func sectionButtonReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionButtonReusableView? {
      return R.nib.sectionButtonReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionButtonReusableView
    }
    
    static func sectionTitleReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionTitleReusableView? {
      return R.nib.sectionTitleReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionTitleReusableView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 12 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CartItemCell`.
    static let cartItemCell: Rswift.ReuseIdentifier<CartItemCell> = Rswift.ReuseIdentifier(identifier: "CartItemCell")
    /// Reuse identifier `FeatureCell`.
    static let featureCell: Rswift.ReuseIdentifier<FeatureCell> = Rswift.ReuseIdentifier(identifier: "FeatureCell")
    /// Reuse identifier `FeatureReusableView`.
    static let featureReusableView: Rswift.ReuseIdentifier<FeatureReusableView> = Rswift.ReuseIdentifier(identifier: "FeatureReusableView")
    /// Reuse identifier `ItemBasicCell`.
    static let itemBasicCell: Rswift.ReuseIdentifier<ItemBasicCell> = Rswift.ReuseIdentifier(identifier: "ItemBasicCell")
    /// Reuse identifier `ItemCell`.
    static let itemCell: Rswift.ReuseIdentifier<ItemCell> = Rswift.ReuseIdentifier(identifier: "ItemCell")
    /// Reuse identifier `ItemDescriptionCell`.
    static let itemDescriptionCell: Rswift.ReuseIdentifier<ItemDescriptionCell> = Rswift.ReuseIdentifier(identifier: "ItemDescriptionCell")
    /// Reuse identifier `ItemSizeCell`.
    static let itemSizeCell: Rswift.ReuseIdentifier<ItemSizeCell> = Rswift.ReuseIdentifier(identifier: "ItemSizeCell")
    /// Reuse identifier `MyPageBasicCell`.
    static let myPageBasicCell: Rswift.ReuseIdentifier<MyPageBasicCell> = Rswift.ReuseIdentifier(identifier: "MyPageBasicCell")
    /// Reuse identifier `MyPageRightDetailCell`.
    static let myPageRightDetailCell: Rswift.ReuseIdentifier<MyPageRightDetailCell> = Rswift.ReuseIdentifier(identifier: "MyPageRightDetailCell")
    /// Reuse identifier `MyPageSubtitleCell`.
    static let myPageSubtitleCell: Rswift.ReuseIdentifier<MyPageSubtitleCell> = Rswift.ReuseIdentifier(identifier: "MyPageSubtitleCell")
    /// Reuse identifier `SectionButtonReusableView`.
    static let sectionButtonReusableView: Rswift.ReuseIdentifier<SectionButtonReusableView> = Rswift.ReuseIdentifier(identifier: "SectionButtonReusableView")
    /// Reuse identifier `SectionTitleReusableView`.
    static let sectionTitleReusableView: Rswift.ReuseIdentifier<SectionTitleReusableView> = Rswift.ReuseIdentifier(identifier: "SectionTitleReusableView")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _FeatureReusableView.validate()
    }
    
    struct _FeatureCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FeatureCell
      
      let bundle = R.hostingBundle
      let identifier = "FeatureCell"
      let name = "FeatureCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeatureCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeatureCell
      }
      
      fileprivate init() {}
    }
    
    struct _FeatureReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FeatureReusableView
      
      let bundle = R.hostingBundle
      let identifier = "FeatureReusableView"
      let name = "FeatureReusableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeatureReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeatureReusableView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "img_banner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_banner' is used in nib 'FeatureReusableView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemCell"
      let name = "ItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _SectionButtonReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SectionButtonReusableView
      
      let bundle = R.hostingBundle
      let identifier = "SectionButtonReusableView"
      let name = "SectionButtonReusableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionButtonReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionButtonReusableView
      }
      
      fileprivate init() {}
    }
    
    struct _SectionTitleReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SectionTitleReusableView
      
      let bundle = R.hostingBundle
      let identifier = "SectionTitleReusableView"
      let name = "SectionTitleReusableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionTitleReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionTitleReusableView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cartViewController = StoryboardViewControllerResource<CartViewController>(identifier: "CartViewController")
      let favoriteViewController = StoryboardViewControllerResource<FavoriteViewController>(identifier: "FavoriteViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let informationViewController = StoryboardViewControllerResource<InformationViewController>(identifier: "InformationViewController")
      let itemViewController = StoryboardViewControllerResource<ItemViewController>(identifier: "ItemViewController")
      let myPageViewController = StoryboardViewControllerResource<MyPageViewController>(identifier: "MyPageViewController")
      let name = "Main"
      let orderCompleteViewController = StoryboardViewControllerResource<OrderCompleteViewController>(identifier: "OrderCompleteViewController")
      let orderViewController = StoryboardViewControllerResource<OrderViewController>(identifier: "OrderViewController")
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let searchResultViewController = StoryboardViewControllerResource<SearchResultViewController>(identifier: "SearchResultViewController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      let settingNotificationViewController = StoryboardViewControllerResource<SettingNotificationViewController>(identifier: "SettingNotificationViewController")
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")
      let tabViewController = StoryboardViewControllerResource<TabViewController>(identifier: "TabViewController")
      
      func cartViewController(_: Void = ()) -> CartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cartViewController)
      }
      
      func favoriteViewController(_: Void = ()) -> FavoriteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoriteViewController)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func informationViewController(_: Void = ()) -> InformationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: informationViewController)
      }
      
      func itemViewController(_: Void = ()) -> ItemViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemViewController)
      }
      
      func myPageViewController(_: Void = ()) -> MyPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPageViewController)
      }
      
      func orderCompleteViewController(_: Void = ()) -> OrderCompleteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderCompleteViewController)
      }
      
      func orderViewController(_: Void = ()) -> OrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderViewController)
      }
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      func searchResultViewController(_: Void = ()) -> SearchResultViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchResultViewController)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      func settingNotificationViewController(_: Void = ()) -> SettingNotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingNotificationViewController)
      }
      
      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }
      
      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }
      
      func tabViewController(_: Void = ()) -> TabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_highlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_cart_none", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_cart_none' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_favorite_none", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_favorite_none' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_size", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_size' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "round_close_black_18pt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'round_close_black_18pt' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "button_primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'button_primary' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "button_secondary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'button_secondary' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "link", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'link' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().cartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cartViewController' could not be loaded from storyboard 'Main' as 'CartViewController'.") }
        if _R.storyboard.main().favoriteViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoriteViewController' could not be loaded from storyboard 'Main' as 'FavoriteViewController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().informationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'informationViewController' could not be loaded from storyboard 'Main' as 'InformationViewController'.") }
        if _R.storyboard.main().itemViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemViewController' could not be loaded from storyboard 'Main' as 'ItemViewController'.") }
        if _R.storyboard.main().myPageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPageViewController' could not be loaded from storyboard 'Main' as 'MyPageViewController'.") }
        if _R.storyboard.main().orderCompleteViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderCompleteViewController' could not be loaded from storyboard 'Main' as 'OrderCompleteViewController'.") }
        if _R.storyboard.main().orderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderViewController' could not be loaded from storyboard 'Main' as 'OrderViewController'.") }
        if _R.storyboard.main().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Main' as 'ProfileViewController'.") }
        if _R.storyboard.main().searchResultViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchResultViewController' could not be loaded from storyboard 'Main' as 'SearchResultViewController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
        if _R.storyboard.main().settingNotificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingNotificationViewController' could not be loaded from storyboard 'Main' as 'SettingNotificationViewController'.") }
        if _R.storyboard.main().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Main' as 'SignInViewController'.") }
        if _R.storyboard.main().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Main' as 'SignUpViewController'.") }
        if _R.storyboard.main().tabViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabViewController' could not be loaded from storyboard 'Main' as 'TabViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
